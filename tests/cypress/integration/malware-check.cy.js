import { cleanupVisitHomePage, wpLogin } from '../support/utils';
import { spyOnHostingPanelApi } from '../support/intercepts';
import { testEnabledForPlugin } from '../support/utils';

describe( 'Malware Check Card', () => {
	before( function () {
		testEnabledForPlugin( 'bluehost' );
		wpLogin();
		cy.visit( '/wp-admin/admin.php?page=nfd-hosting' );
		spyOnHostingPanelApi();
		cy.wait( '@getPanelData' );
	} );

	it( 'renders the Malware Check card and icon after API load', () => {
		cy.get( '[data-testid="malware-check-card"]' ).should( 'exist' );

		// Wait for card to stabilize (icon loaded, scan attempt finished)
		cy.get( '[data-testid="malware-check-card-status-icon"]', {
			timeout: 30000,
		} ).should( 'exist' );

		// Check that the icon has a known status class
		cy.get( '[data-testid="malware-check-card-status-icon"] svg' )
			.should( 'have.attr', 'class' )
			.and( 'match', /nfd-text-(green|red|gray)-500/ );
	} );

	it( 'installs Jetpack Protect via the correct installer API payload', () => {
		// Spy on plugin installer call
		cy.intercept(
			'POST',
			/\/(index\.php|wp-json)\/?\?rest_route=%2Fnewfold-installer%2Fv1%2Fplugins%2Finstall.*/
		).as( 'pluginInstall' );

		// Hard refresh the current page
		cy.reload( true );

		// Assert payload was correct
		cy.wait( '@pluginInstall' )
			.its( 'request.body' )
			.should( ( body ) => {
				expect( body ).to.deep.equal( {
					plugin: 'jetpack-protect',
					activate: true,
					queue: false,
				} );
			} );
	} );

	it( 'has a scan button and conditionally a support button', () => {
		cy.get( '[data-testid="malware-check-card-scan-button"]' ).should(
			'exist'
		);

		// Only shown if threats > 0 (based on real data)
		cy.get( 'body' ).then( ( $body ) => {
			if (
				$body.find(
					'[data-testid="malware-check-card-support-button"]'
				).length
			) {
				cy.get(
					'[data-testid="malware-check-card-support-button"]'
				).should( 'be.visible' );
			}
		} );
	} );

	it( 'redirects to full scan setup when clicking "Run full scan"', () => {
		// Stub window.open to intercept the scan URL
		cy.window().then( ( win ) => {
			cy.stub( win, 'open' ).as( 'windowOpen' );
		} );

		cy.get( '[data-testid="malware-check-card-scan-button"]' ).click();

		cy.get( '@windowOpen' ).should(
			'be.calledWithMatch',
			/admin\.php\?page=jetpack-protect#\/scan/
		);
	} );

	// After all tests in the suite, visit the home page to reset the environment
	after( () => {
		cleanupVisitHomePage();
	} );
} );
